// Copyright 2025 Carnegie Mellon University. All Rights Reserved.
// Released under a MIT (SEI)-style license. See LICENSE.md in the project root for license information.

ï»¿// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Player.Api.Data.Data;

#nullable disable

namespace Player.Api.Migrations.PostgreSQL.Migrations
{
    [DbContext(typeof(PlayerContext))]
    [Migration("20250317143056_RevertVms_Permission")]
    partial class RevertVms_Permission
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Player.Api.Data.Data.Models.ApplicationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("ApplicationTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("application_template_id");

                    b.Property<bool?>("Embeddable")
                        .HasColumnType("boolean")
                        .HasColumnName("embeddable");

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<bool?>("LoadInBackground")
                        .HasColumnType("boolean")
                        .HasColumnName("load_in_background");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<Guid>("ViewId")
                        .HasColumnType("uuid")
                        .HasColumnName("view_id");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationTemplateId");

                    b.HasIndex("ViewId");

                    b.ToTable("applications");
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.ApplicationInstanceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("application_id");

                    b.Property<float>("DisplayOrder")
                        .HasColumnType("real")
                        .HasColumnName("display_order");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("TeamId");

                    b.ToTable("application_instances");
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.ApplicationTemplateEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("Embeddable")
                        .HasColumnType("boolean")
                        .HasColumnName("embeddable");

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<bool>("LoadInBackground")
                        .HasColumnType("boolean")
                        .HasColumnName("load_in_background");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.ToTable("application_templates");
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.FileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<List<Guid>>("TeamIds")
                        .HasColumnType("uuid[]")
                        .HasColumnName("team_ids");

                    b.Property<Guid?>("ViewId")
                        .HasColumnType("uuid")
                        .HasColumnName("view_id");

                    b.HasKey("Id");

                    b.HasIndex("ViewId");

                    b.ToTable("files");
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.NotificationEntity", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("key");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Key"));

                    b.Property<DateTime>("BroadcastTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("broadcast_time");

                    b.Property<Guid>("FromId")
                        .HasColumnType("uuid")
                        .HasColumnName("from_id");

                    b.Property<string>("FromName")
                        .HasColumnType("text")
                        .HasColumnName("from_name");

                    b.Property<int>("FromType")
                        .HasColumnType("integer")
                        .HasColumnName("from_type");

                    b.Property<string>("Link")
                        .HasColumnType("text")
                        .HasColumnName("link");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<string>("Subject")
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<Guid>("ToId")
                        .HasColumnType("uuid")
                        .HasColumnName("to_id");

                    b.Property<string>("ToName")
                        .HasColumnType("text")
                        .HasColumnName("to_name");

                    b.Property<int>("ToType")
                        .HasColumnType("integer")
                        .HasColumnName("to_type");

                    b.Property<Guid?>("ViewId")
                        .HasColumnType("uuid")
                        .HasColumnName("view_id");

                    b.HasKey("Key");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.PermissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("Immutable")
                        .HasColumnType("boolean")
                        .HasColumnName("immutable");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("06e2699d-21a9-4053-922a-411499b3e923"),
                            Description = "",
                            Immutable = true,
                            Name = "CreateViews"
                        },
                        new
                        {
                            Id = new Guid("06da87d8-7636-4a50-929a-bbff2fbad548"),
                            Description = "",
                            Immutable = true,
                            Name = "ViewViews"
                        },
                        new
                        {
                            Id = new Guid("6c407f81-ab2e-4b24-911b-78b7f424b965"),
                            Description = "",
                            Immutable = true,
                            Name = "EditViews"
                        },
                        new
                        {
                            Id = new Guid("5597959a-ff30-4b73-9122-f21d17c19382"),
                            Description = "",
                            Immutable = true,
                            Name = "ManageViews"
                        },
                        new
                        {
                            Id = new Guid("70f3e368-7e7a-4166-9698-5c96dbb19ceb"),
                            Description = "",
                            Immutable = true,
                            Name = "ViewUsers"
                        },
                        new
                        {
                            Id = new Guid("5cc1e12e-7440-4bd8-9a54-ccb5bb0f3f1e"),
                            Description = "",
                            Immutable = true,
                            Name = "ManageUsers"
                        },
                        new
                        {
                            Id = new Guid("0ef125ff-c493-476d-a041-0b6af54f4d36"),
                            Description = "",
                            Immutable = true,
                            Name = "ViewApplications"
                        },
                        new
                        {
                            Id = new Guid("8dc72622-565d-4b86-b6d7-1692dc803815"),
                            Description = "",
                            Immutable = true,
                            Name = "ManageApplications"
                        },
                        new
                        {
                            Id = new Guid("cfcc8ac3-6591-41b8-abe1-0456616b3798"),
                            Description = "",
                            Immutable = true,
                            Name = "ViewRoles"
                        },
                        new
                        {
                            Id = new Guid("f1416f76-aa64-4edc-bfa8-6f234da85060"),
                            Description = "",
                            Immutable = true,
                            Name = "ManageRoles"
                        },
                        new
                        {
                            Id = new Guid("e15b0177-5250-4886-b062-4029a9371a99"),
                            Description = "",
                            Immutable = true,
                            Name = "ViewWebhookSubscriptions"
                        },
                        new
                        {
                            Id = new Guid("e1772ce2-eacb-478f-bac8-2e77d49c608a"),
                            Description = "",
                            Immutable = true,
                            Name = "ManageWebhookSubscriptions"
                        });
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("AllPermissions")
                        .HasColumnType("boolean")
                        .HasColumnName("all_permissions");

                    b.Property<bool>("Immutable")
                        .HasColumnType("boolean")
                        .HasColumnName("immutable");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f6c07d62-4f2c-4bd5-82af-bf32c0daccc7"),
                            AllPermissions = true,
                            Immutable = true,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = new Guid("7fd6aa3e-a765-47b8-a77e-f58eae53a82f"),
                            AllPermissions = false,
                            Immutable = false,
                            Name = "Content Developer"
                        });
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.RolePermissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid")
                        .HasColumnName("permission_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId", "PermissionId")
                        .IsUnique();

                    b.ToTable("role_permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b5ef76d0-6257-4657-a51a-79d1e3850720"),
                            PermissionId = new Guid("06e2699d-21a9-4053-922a-411499b3e923"),
                            RoleId = new Guid("7fd6aa3e-a765-47b8-a77e-f58eae53a82f")
                        });
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.TeamEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<Guid>("ViewId")
                        .HasColumnType("uuid")
                        .HasColumnName("view_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("ViewId");

                    b.ToTable("teams");
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.TeamMembershipEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("ViewMembershipId")
                        .HasColumnType("uuid")
                        .HasColumnName("view_membership_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.HasIndex("ViewMembershipId");

                    b.HasIndex("TeamId", "UserId")
                        .IsUnique();

                    b.ToTable("team_memberships");
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.TeamPermissionAssignmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid")
                        .HasColumnName("permission_id");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("TeamId", "PermissionId")
                        .IsUnique();

                    b.ToTable("team_permission_assignments");
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.TeamPermissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("Immutable")
                        .HasColumnType("boolean")
                        .HasColumnName("immutable");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("team_permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f3ef9465-7f7c-43ef-9855-83798ce5bcd5"),
                            Description = "Allows viewing Team resources",
                            Immutable = true,
                            Name = "ViewTeam"
                        },
                        new
                        {
                            Id = new Guid("fbabccc8-48c7-478a-bc30-d4bd8950e3d5"),
                            Description = "Allows editing basic Team resources, including making changes within Virtual Machines, if applicable.",
                            Immutable = true,
                            Name = "EditTeam"
                        },
                        new
                        {
                            Id = new Guid("83e41563-8b7f-4f43-b9d0-2d8dc12fc0bf"),
                            Description = "Allows managing all Team resources, including adding and removing Users.",
                            Immutable = true,
                            Name = "ManageTeam"
                        },
                        new
                        {
                            Id = new Guid("dedb382b-9d9f-43dc-b128-bb5f1ad94a15"),
                            Description = "Allows managing all resources for all Teams in the View",
                            Immutable = true,
                            Name = "ManageView"
                        },
                        new
                        {
                            Id = new Guid("7be07cd5-104e-4770-800b-80ac26cda6d5"),
                            Description = "Allows viewing all resources in the View",
                            Immutable = true,
                            Name = "ViewView"
                        },
                        new
                        {
                            Id = new Guid("5ae96619-b40b-4fdb-bbef-ad476c21553d"),
                            Description = "Allows editing all basic resources in the View, including making changes within Virtual Machines, if applicable.",
                            Immutable = true,
                            Name = "EditView"
                        },
                        new
                        {
                            Id = new Guid("5da3014c-a6a5-4c3c-a658-e86672801313"),
                            Description = "Allows uploading ISOs that can be used by any Teams in the View",
                            Immutable = false,
                            Name = "UploadViewIsos"
                        },
                        new
                        {
                            Id = new Guid("d7271fd0-e47f-4630-a5ef-744acc4dc004"),
                            Description = "Allows uploading ISOs that can be used by members of the Team",
                            Immutable = false,
                            Name = "UploadTeamIsos"
                        },
                        new
                        {
                            Id = new Guid("3b135496-c7d9-4bef-b60c-fbcfa1af9c1b"),
                            Description = "Allows downloading files directly from Vms",
                            Immutable = false,
                            Name = "DownloadVmFiles"
                        },
                        new
                        {
                            Id = new Guid("6e41449b-a5da-4ac0-9adb-432210a5541c"),
                            Description = "Allows uploading files directly to Vms",
                            Immutable = false,
                            Name = "UploadVmFiles"
                        },
                        new
                        {
                            Id = new Guid("42da22ae-ca0f-440f-87e0-5742799f60e1"),
                            Description = "Allows reverting a Vm to it's current snapshot",
                            Immutable = false,
                            Name = "RevertVms"
                        });
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.TeamRoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("AllPermissions")
                        .HasColumnType("boolean")
                        .HasColumnName("all_permissions");

                    b.Property<bool>("Immutable")
                        .HasColumnType("boolean")
                        .HasColumnName("immutable");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("team_roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b65ce1b0-f995-45e1-93fc-47a09542cee5"),
                            AllPermissions = true,
                            Immutable = true,
                            Name = "View Admin"
                        },
                        new
                        {
                            Id = new Guid("c875dcce-2488-4e73-8585-8375b4730151"),
                            AllPermissions = false,
                            Immutable = false,
                            Name = "Observer"
                        },
                        new
                        {
                            Id = new Guid("a721a3bf-0ae1-4cd3-9d6f-e56d07260f22"),
                            AllPermissions = false,
                            Immutable = false,
                            Name = "View Member"
                        });
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.TeamRolePermissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid")
                        .HasColumnName("permission_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId", "PermissionId")
                        .IsUnique();

                    b.ToTable("team_role_permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d0715a73-16c3-4e44-be57-6bbf2e25e7b3"),
                            PermissionId = new Guid("f3ef9465-7f7c-43ef-9855-83798ce5bcd5"),
                            RoleId = new Guid("c875dcce-2488-4e73-8585-8375b4730151")
                        },
                        new
                        {
                            Id = new Guid("5939d9cf-6f4b-4136-907c-0e878da2241b"),
                            PermissionId = new Guid("7be07cd5-104e-4770-800b-80ac26cda6d5"),
                            RoleId = new Guid("c875dcce-2488-4e73-8585-8375b4730151")
                        },
                        new
                        {
                            Id = new Guid("d1252d24-c25d-4a80-a91c-4ad23efa9f89"),
                            PermissionId = new Guid("f3ef9465-7f7c-43ef-9855-83798ce5bcd5"),
                            RoleId = new Guid("a721a3bf-0ae1-4cd3-9d6f-e56d07260f22")
                        },
                        new
                        {
                            Id = new Guid("f83d8368-1839-44d4-ad8c-dfa7fae56565"),
                            PermissionId = new Guid("fbabccc8-48c7-478a-bc30-d4bd8950e3d5"),
                            RoleId = new Guid("a721a3bf-0ae1-4cd3-9d6f-e56d07260f22")
                        },
                        new
                        {
                            Id = new Guid("8a2d8db9-cb8f-4952-9f3b-1377140f0c11"),
                            PermissionId = new Guid("d7271fd0-e47f-4630-a5ef-744acc4dc004"),
                            RoleId = new Guid("a721a3bf-0ae1-4cd3-9d6f-e56d07260f22")
                        },
                        new
                        {
                            Id = new Guid("aba4f8e0-298e-4e10-b0d4-ec6447baad6b"),
                            PermissionId = new Guid("6e41449b-a5da-4ac0-9adb-432210a5541c"),
                            RoleId = new Guid("a721a3bf-0ae1-4cd3-9d6f-e56d07260f22")
                        });
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.UserEntity", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("key");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Key"));

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Key");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.ViewEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentViewId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_view_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("ParentViewId");

                    b.ToTable("views");
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.ViewMembershipEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("PrimaryTeamMembershipId")
                        .HasColumnType("uuid")
                        .HasColumnName("primary_team_membership_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("ViewId")
                        .HasColumnType("uuid")
                        .HasColumnName("view_id");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryTeamMembershipId");

                    b.HasIndex("UserId");

                    b.HasIndex("ViewId", "UserId")
                        .IsUnique();

                    b.ToTable("view_memberships");
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.Webhooks.PendingEventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("EventType")
                        .HasColumnType("integer")
                        .HasColumnName("event_type");

                    b.Property<string>("Payload")
                        .HasColumnType("text")
                        .HasColumnName("payload");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscription_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("pending_events");
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.Webhooks.WebhookSubscriptionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("CallbackUri")
                        .HasColumnType("text")
                        .HasColumnName("callback_uri");

                    b.Property<string>("ClientId")
                        .HasColumnType("text")
                        .HasColumnName("client_id");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text")
                        .HasColumnName("client_secret");

                    b.Property<string>("LastError")
                        .HasColumnType("text")
                        .HasColumnName("last_error");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("webhooks");
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.Webhooks.WebhookSubscriptionEventTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("EventType")
                        .HasColumnType("integer")
                        .HasColumnName("event_type");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscription_id");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId", "EventType")
                        .IsUnique();

                    b.ToTable("webhook_subscription_event_types");
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.ApplicationEntity", b =>
                {
                    b.HasOne("Player.Api.Data.Data.Models.ApplicationTemplateEntity", "Template")
                        .WithMany()
                        .HasForeignKey("ApplicationTemplateId");

                    b.HasOne("Player.Api.Data.Data.Models.ViewEntity", "View")
                        .WithMany("Applications")
                        .HasForeignKey("ViewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("View");
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.ApplicationInstanceEntity", b =>
                {
                    b.HasOne("Player.Api.Data.Data.Models.ApplicationEntity", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Player.Api.Data.Data.Models.TeamEntity", "Team")
                        .WithMany("Applications")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.FileEntity", b =>
                {
                    b.HasOne("Player.Api.Data.Data.Models.ViewEntity", "View")
                        .WithMany("Files")
                        .HasForeignKey("ViewId");

                    b.Navigation("View");
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.RolePermissionEntity", b =>
                {
                    b.HasOne("Player.Api.Data.Data.Models.PermissionEntity", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Player.Api.Data.Data.Models.RoleEntity", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.TeamEntity", b =>
                {
                    b.HasOne("Player.Api.Data.Data.Models.TeamRoleEntity", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Player.Api.Data.Data.Models.ViewEntity", "View")
                        .WithMany("Teams")
                        .HasForeignKey("ViewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("View");
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.TeamMembershipEntity", b =>
                {
                    b.HasOne("Player.Api.Data.Data.Models.TeamRoleEntity", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("Player.Api.Data.Data.Models.TeamEntity", "Team")
                        .WithMany("Memberships")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Player.Api.Data.Data.Models.UserEntity", "User")
                        .WithMany("TeamMemberships")
                        .HasForeignKey("UserId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Player.Api.Data.Data.Models.ViewMembershipEntity", "ViewMembership")
                        .WithMany("TeamMemberships")
                        .HasForeignKey("ViewMembershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Team");

                    b.Navigation("User");

                    b.Navigation("ViewMembership");
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.TeamPermissionAssignmentEntity", b =>
                {
                    b.HasOne("Player.Api.Data.Data.Models.TeamPermissionEntity", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Player.Api.Data.Data.Models.TeamEntity", "Team")
                        .WithMany("Permissions")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.TeamRolePermissionEntity", b =>
                {
                    b.HasOne("Player.Api.Data.Data.Models.TeamPermissionEntity", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Player.Api.Data.Data.Models.TeamRoleEntity", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.UserEntity", b =>
                {
                    b.HasOne("Player.Api.Data.Data.Models.RoleEntity", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.ViewEntity", b =>
                {
                    b.HasOne("Player.Api.Data.Data.Models.ViewEntity", "ParentView")
                        .WithMany()
                        .HasForeignKey("ParentViewId");

                    b.Navigation("ParentView");
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.ViewMembershipEntity", b =>
                {
                    b.HasOne("Player.Api.Data.Data.Models.TeamMembershipEntity", "PrimaryTeamMembership")
                        .WithMany()
                        .HasForeignKey("PrimaryTeamMembershipId");

                    b.HasOne("Player.Api.Data.Data.Models.UserEntity", "User")
                        .WithMany("ViewMemberships")
                        .HasForeignKey("UserId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Player.Api.Data.Data.Models.ViewEntity", "View")
                        .WithMany("Memberships")
                        .HasForeignKey("ViewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryTeamMembership");

                    b.Navigation("User");

                    b.Navigation("View");
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.Webhooks.PendingEventEntity", b =>
                {
                    b.HasOne("Player.Api.Data.Data.Models.Webhooks.WebhookSubscriptionEntity", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.Webhooks.WebhookSubscriptionEventTypeEntity", b =>
                {
                    b.HasOne("Player.Api.Data.Data.Models.Webhooks.WebhookSubscriptionEntity", "Subscription")
                        .WithMany("EventTypes")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.RoleEntity", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.TeamEntity", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Memberships");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.TeamRoleEntity", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.UserEntity", b =>
                {
                    b.Navigation("TeamMemberships");

                    b.Navigation("ViewMemberships");
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.ViewEntity", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Files");

                    b.Navigation("Memberships");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.ViewMembershipEntity", b =>
                {
                    b.Navigation("TeamMemberships");
                });

            modelBuilder.Entity("Player.Api.Data.Data.Models.Webhooks.WebhookSubscriptionEntity", b =>
                {
                    b.Navigation("EventTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
